# Part 1
  # Load Data
data_dir <- file.path("data", "ERP109789")
data_file <- file.path(data_dir, "ERP109789.tsv")
file.exists(data_file)
data <- readr::read_tsv(data_file)
  # Load Metadata
metadata_file <- file.path(data_dir, "metadata_ERP109789.tsv")
file.exists(metadata_file)
metadata <- readr::read_tsv(metadata_file)

# Part 2a
geneNames <- data$Gene
data$Gene <- NULL
rownames(data) <- geneNames
data <- data.matrix(data)
mads <- apply(data,1,mad)
data_5000<-data[rev(order(mads))[1:5000],]

# Part 2b
library(magrittr)
library(dplyr)
library(caret)
library(e1071)
library(randomForest)
library(class)
library(naivebayes)
library(klaR)
  # Update metadata
metadata <- metadata %>%
  dplyr::mutate(mutation_status = dplyr::case_when(
    stringr::str_detect(stimulus, "brain-derived neurotrophic factor") ~ "treated",
    stringr::str_detect(stimulus, "TrkB agonist antibody ZEB85") ~ "treated",
    stringr::str_detect(stimulus, "neurotrophin-4") ~ "treated",
    stringr::str_detect(stimulus, "none") ~ "reference"
  ))
  # Add target to data
dvw <- data.frame(t(data_5000), target = as.factor(metadata$mutation_status))
  # Support vector machine
svm_control <-  rfeControl(functions = caretFuncs, method = "repeatedcv") 
svm_model <- rfe(x = dvw[,-ncol(dvw)], y = dvw$target, rfeControl = svm_control, method = "svmRadial")
  # K nearest neighbours
knn_control <-  rfeControl(functions = caretFuncs, method = "repeatedcv") 
knn_model <- rfe(x = dvw[,-ncol(dvw)], y = dvw$target, rfeControl = knn_control, method = "knn")
  # Random forest
rf_control <- rfeControl(functions = rfFuncs, method = "repeatedcv")
rf_model <- rfe(x = dvw[,-ncol(dvw)], y = dvw$target, rfeControl = rf_control)
  # Naive bayes
nb_control <- rfeControl(functions = nbFuncs, method = "repeatedcv")
nb_model <- rfe(x = dvw[,-ncol(dvw)], y = dvw$target, rfeControl = nb_control)

# Part 2f
  # Support vector machine
svm_genes <- predictors(svm_model)
  # K nearest neighbours
knn_genes <- predictors(knn_model)
  # Random forest
rf_genes <- predictors(rf_model)
  # Naive bayes
nb_genes <- predictors(nb_model)

# Part 2g
# Rerun each predictive method using different numbers of genes. Try 10, 100, 1000, and 10000 genes.
library(pROC)
training_indices <- createDataPartition(dvw$target, p = 0.8, list = FALSE)
  # Prepare data
data_10 <- data[rev(order(mads))[1:10],]
data_100 <- data[rev(order(mads))[1:100],]
data_1000 <- data[rev(order(mads))[1:1000],]
data_10000 <- data[rev(order(mads))[1:10000],]
  # Add target to data
dvw_10 <- data.frame(t(data_10), target = as.factor(metadata$mutation_status))
dvw_100 <- data.frame(t(data_100), target = as.factor(metadata$mutation_status))
dvw_1000 <- data.frame(t(data_1000), target = as.factor(metadata$mutation_status))
dvw_10000 <- data.frame(t(data_10000), target = as.factor(metadata$mutation_status))
  # Support vector machine
svm_model_10 <- rfe(x = dvw_10[training_indices,-ncol(dvw_10)], y = dvw$target[training_indices], rfeControl = svm_control, method = "svmRadial")
svm_model_100 <- rfe(x = dvw_100[training_indices,-ncol(dvw_100)], y = dvw$target[training_indices], rfeControl = svm_control, method = "svmRadial")
svm_model_1000 <- rfe(x = dvw_1000[training_indices,-ncol(dvw_1000)], y = dvw$target[training_indices], rfeControl = svm_control, method = "svmRadial")
svm_model_10000 <- rfe(x = dvw_10000[training_indices,-ncol(dvw_10000)], y = dvw$target[training_indices], rfeControl = svm_control, method = "svmRadial")
predictors(svm_model_10)
predictors(svm_model_100)
predictors(svm_model_1000)
predictors(svm_model_10000)
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(svm_model_10, dvw_10[-training_indices,-ncol(dvw_10)], type="response"))))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(svm_model_100, dvw_100[-training_indices,-ncol(dvw_100)], type="response"))))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(svm_model_1000, dvw_1000[-training_indices,-ncol(dvw_1000)], type="response"))))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(svm_model_10000, dvw_10000[-training_indices,-ncol(dvw_10000)], type="response"))))
  # K nearest neighbours
knn_model_10 <- rfe(x = dvw_10[,-ncol(dvw_10)], y = dvw$target, rfeControl = knn_control, method = "knn")
knn_model_100 <- rfe(x = dvw_100[,-ncol(dvw_100)], y = dvw$target, rfeControl = knn_control, method = "knn")
knn_model_1000 <- rfe(x = dvw_1000[,-ncol(dvw_1000)], y = dvw$target, rfeControl = knn_control, method = "knn")
knn_model_10000 <- rfe(x = dvw_10000[,-ncol(dvw_10000)], y = dvw$target, rfeControl = knn_control, method = "knn")
predictors(knn_model_10)
predictors(knn_model_100)
predictors(knn_model_1000)
predictors(knn_model_10000)
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(knn_model_10, dvw_10[-training_indices,-ncol(dvw_10)], type="response"))))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(knn_model_100, dvw_100[-training_indices,-ncol(dvw_100)], type="response"))))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(knn_model_1000, dvw_1000[-training_indices,-ncol(dvw_1000)], type="response"))))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(knn_model_10000, dvw_10000[-training_indices,-ncol(dvw_10000)], type="response"))))
  # Random forest
rf_model_10 <- rfe(x = dvw_10[,-ncol(dvw_10)], y = dvw$target, rfeControl = rf_control)
rf_model_100 <- rfe(x = dvw_100[,-ncol(dvw_100)], y = dvw$target, rfeControl = rf_control)
rf_model_1000 <- rfe(x = dvw_1000[,-ncol(dvw_1000)], y = dvw$target, rfeControl = rf_control)
rf_model_10000 <- rfe(x = dvw_10000[,-ncol(dvw_10000)], y = dvw$target, rfeControl = rf_control)
predictors(rf_model_10)
predictors(rf_model_100)
predictors(rf_model_1000)
predictors(rf_model_10000)
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(rf_model_10, dvw_10[-training_indices,-ncol(dvw_10)], type="response")$pred)))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(rf_model_100, dvw_100[-training_indices,-ncol(dvw_100)], type="response")$pred)))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(rf_model_1000, dvw_1000[-training_indices,-ncol(dvw_1000)], type="response")$pred)))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(rf_model_10000, dvw_10000[-training_indices,-ncol(dvw_10000)], type="response")$pred)))
  # Naive bayes
nb_model_10 <- rfe(x = dvw_10[,-ncol(dvw_10)], y = dvw$target, rfeControl = nb_control)
nb_model_100 <- rfe(x = dvw_100[,-ncol(dvw_100)], y = dvw$target, rfeControl = nb_control)
nb_model_1000 <- rfe(x = dvw_1000[,-ncol(dvw_1000)], y = dvw$target, rfeControl = nb_control)
nb_model_10000 <- rfe(x = dvw_10000[,-ncol(dvw_10000)], y = dvw$target, rfeControl = nb_control)
predictors(nb_model_10)
predictors(nb_model_100)
predictors(nb_model_1000)
predictors(nb_model_10000)
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(nb_model_10, dvw_10[-training_indices,-ncol(dvw_10)], type="response")$pred)))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(nb_model_100, dvw_100[-training_indices,-ncol(dvw_100)], type="response")$pred)))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(nb_model_1000, dvw_1000[-training_indices,-ncol(dvw_1000)], type="response")$pred)))
auc(roc(response = dvw$target[-training_indices], predictor = as.numeric(predict(nb_model_10000, dvw_10000[-training_indices,-ncol(dvw_10000)], type="response")$pred)))

# Part 3a
  # Prepare annotations
library(ComplexHeatmap)
column_ha <- HeatmapAnnotation(TreatedType = metadata$mutation_status)
  # Create heatmap
Heatmap(data_5000[union(union(svm_genes, knn_genes), union(rf_genes, nb_genes)),], top_annotation = column_ha, column_names_gp = grid::gpar(fontsize = 1), row_names_gp = grid::gpar(fontsize = 10))
