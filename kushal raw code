# Question 1
if (!("org.Hs.eg.db" %in% installed.packages())) {
  # Install this package if it isn't installed yet
  BiocManager::install("org.Hs.eg.db", update = FALSE)
}

# Attach the library
library(org.Hs.eg.db)

# We will need this so we can use the pipe: %>%
library(magrittr)

data_dir <- file.path("data", "ERP109789")

results_dir<-file.path("results")

data_file <- file.path(data_dir, "ERP109789.tsv")

metadata_file <- file.path(data_dir, "metadata_ERP109789.tsv")

file.exists(data_file)

file.exists(metadata_file)

metadata <- readr::read_tsv(metadata_file)

expression_df <- readr::read_tsv(data_file) %>%
  # Tuck away the Gene ID column as row names
  tibble::column_to_rownames("Gene")

expression_df <- expression_df %>%
  dplyr::select(metadata$refinebio_accession_code)

all.equal(colnames(expression_df), metadata$refinebio_accession_code)

expression_df <- expression_df %>%
  tibble::rownames_to_column("Gene")

count_hugo <- mapIds(
  org.Hs.eg.db, # Replace with annotation package for your organism
  keys = expression_df$Gene,
  keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
  column = "SYMBOL", # The type of gene identifiers you would like to map to
  multiVals = "first"
)

head(count_hugo)


# Question 1

# Moved from Earlier
# Read in data TSV file & Make the data in the order of the metadata
expression_df <- readr::read_tsv(data_file) %>%
  tibble::column_to_rownames("Gene") %>% dplyr::select(metadata$refinebio_accession_code)

# Check if this is in the same order
all.equal(colnames(expression_df), metadata$refinebio_accession_code)

head(metadata$refinebio_title)

# Simplify Condition to be Treated vs Reference instead of multiple treatments
metadata <- metadata %>%
  dplyr::mutate(mutation_status = dplyr::case_when(
    stringr::str_detect(stimulus, "brain-derived neurotrophic factor") ~ "treated",
    stringr::str_detect(stimulus, "TrkB agonist antibody ZEB85") ~ "treated",
    stringr::str_detect(stimulus, "neurotrophin-4") ~ "treated",
    stringr::str_detect(stimulus, "none") ~ "reference"
  ))

# Filter rows with less than 10 counts total in all samples
filtered_expression_df <- expression_df %>%
  dplyr::filter(rowSums(.) >= 10)

gene_matrix <- round(filtered_expression_df)

metadata <- metadata %>%
  dplyr::mutate(
    # Here we define the values our factor variable can have and their order.
    mutation_status = factor(mutation_status, levels = c("reference", "treated"))
  )

# Make rowname column temporarily to do HUGO conversion
temp <- tibble::rownames_to_column(gene_matrix, var = "Gene")


# Change to HUGO names
count_hugo <- data.frame("HUGO" = mapIds(
  org.Hs.eg.db, # Replace with annotation package for your organism
  keys = temp$Gene,
  keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
  column = "SYMBOL", # The type of gene identifiers you would like to map to
  multiVals = "first"
),temp)

# Remove Duplicates
count_hugo <- count_hugo[!duplicated(count_hugo$HUGO),]

# Remove extra columns and make HUGO genes new rownames
count_hugo <- dplyr::select(count_hugo, -Gene)
count_hugo <- tibble::remove_rownames(count_hugo)
#removes N/A points
count_hugo <- na.omit(count_hugo)
#Makes rownames the HUGO names
count_hugo <- tibble::column_to_rownames(count_hugo,var = "HUGO")


# Counts File after all of the preprocessing (use for TSNE, Density Plot, Heatmap, and Differential Expression)
# write.csv(count_hugo, file="counts.csv")


# Load the data
data <- read.table(data_file, header = TRUE, sep = "\t")
# Log-scale the data (assuming gene expression values start from column 2)
log_counts <- log(count_hugo, base = 2)
# Calculate per-gene median expression ranges
gene_median_ranges <- apply(log_counts, 2, function(x) diff(range(x)))
# Create a density plot of per-gene median expression ranges
density_plot <- density(gene_median_ranges)
plot(density_plot, main = "Density Plot of Per-Gene Median Expression Ranges")


# Assignment 3
# Question 2a

gene_variability <- apply(count_hugo, 1, var)
gene_ranking <- order(gene_variability, decreasing = TRUE)

top_5000_variable_genes <- count_hugo[gene_ranking[1:5000], ]
top_10_variable_genes <- count_hugo[gene_ranking[1:10], ]
top_100_variable_genes <- count_hugo[gene_ranking[1:100], ]
top_1000_variable_genes <- count_hugo[gene_ranking[1:1000], ]
top_10000_variable_genes <- count_hugo[gene_ranking[1:10000], ]



# Question 2b
# K-Means

install.packages("stats")
install.packages("ggplot2")

# Load libraries
library(stats)
library(ggplot2)

# Assuming top_5000_variable_genes contains your data
# If not, load your data into this variable.

# Specify the number of clusters (you can change this value)
num_clusters <- 3

# Perform K-means clustering
kmeans_result <- kmeans(top_5000_variable_genes, centers = num_clusters)

# Add cluster assignments to your data
top_5000_variable_genes$cluster <- kmeans_result$cluster

# Create a cluster plot
pca_result <- prcomp(top_5000_variable_genes[, -ncol(top_5000_variable_genes)], scale. = TRUE)

# Create a data frame with the PCA results and cluster assignments
pca_data <- data.frame(PC1 = pca_result$x[, 1], PC2 = pca_result$x[, 2], Cluster = top_5000_variable_genes$cluster)

# Plot the data
ggplot(data = pca_data, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "K-means Clustering", x = "PC1", y = "PC2") +
  scale_color_discrete(name = "Cluster")



#Question 2b -	Hierarchical clustering (hclust)
#Hclust

#top 10 hclustering
top_10_variable_genes <- count_hugo[gene_ranking[1:10], ]
distance_matrix <- dist(top_10_variable_genes, method = "euclidean")
hclust_result <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result, main = "Hierarchical Clustering Dendrogram for Top 10 Variable Genes", hang = -1)

#top 100 hclustering
# Top 100
top_100_variable_genes <- count_hugo[gene_ranking[1:100], ]
distance_matrix <- dist(top_100_variable_genes, method = "euclidean")
hclust_result <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result, main = "Hierarchical Clustering Dendrogram for Top 100 Variable Genes", hang = -1)

# Top 1000 hclustering
top_1000_variable_genes <- count_hugo[gene_ranking[1:1000], ]
distance_matrix <- dist(top_1000_variable_genes, method = "euclidean")
hclust_result <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result, main = "Hierarchical Clustering Dendrogram for Top 1000 Variable Genes", hang = -1)

# Top 5000 hclustering
top_5000_variable_genes <- count_hugo[gene_ranking[1:5000], ]
distance_matrix <- dist(top_5000_variable_genes, method = "euclidean")
hclust_result <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result, main = "Hierarchical Clustering Dendrogram for Top 5000 Variable Genes", hang = -1)

# Top 10000
top_10000_variable_genes <- count_hugo[gene_ranking[1:10000], ]
distance_matrix <- dist(top_10000_variable_genes, method = "euclidean")
hclust_result <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result, main = "Hierarchical Clustering Dendrogram for Top 10000 Variable Genes", hang = -1)




#Question 2b - PAM Clustering 
install.packages("cluster")

# Load the required library
library(cluster)
library(ggplot2)  # For creating the scatter plot

# Perform PAM clustering
# Specify the number of clusters (k) in the 'k' parameter
k <- 5  # Desired number of clusters
pam_result <- pam(top_5000_variable_genes, k)

# Create a data frame with cluster assignments
data_with_clusters <- data.frame(top_5000_variable_genes, Cluster = pam_result$clustering)

# Create a scatter plot using two principal components (you can adjust this for your data)
pca <- prcomp(top_5000_variable_genes)
data_with_clusters <- cbind(data_with_clusters, as.data.frame(pca$x[,1:2]))

# Create a scatter plot
ggplot(data_with_clusters, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "PAM Clustering Results") +
  theme_minimal()


# Print the clustering results
#print(pam_result)

# To access cluster assignments, you can use:
#cluster_assignments <- pam_result$clustering
//////////////////////////////////////////////////////////////////////////

# Calculate gene variability
gene_variability <- apply(count_hugo, 1, var)

# Rank genes by variability in descending order
gene_ranking <- order(gene_variability, decreasing = TRUE)

# Select the top 100 variable genes
top_100_variable_genes <- count_hugo[gene_ranking[1:100], ]

# Calculate gene variability
gene_variability <- apply(count_hugo, 1, var)

# Rank genes by variability in descending order
gene_ranking <- order(gene_variability, decreasing = TRUE)

# Select the top 100 variable genes
top_100_variable_genes <- count_hugo[gene_ranking[1:100], ]

# Perform hierarchical clustering
distance_matrix <- dist(top_100_variable_genes, method = "euclidean")
hclust_result <- hclust(distance_matrix, method = "ward.D2")

distance_matrix <- dist(top_100_variable_genes, method = "euclidean")
hclust_result <- hclust(distance_matrix, method = "ward.D2")

options(repr.plot.width = 10, repr.plot.height = 10)

# Plot the rotated hierarchical clustering dendrogram with smaller font size
par(cex = 0.5)  # Adjust the font size by changing cex (0.5 is an example size)

# Plot the dendrogram
plot(hclust_result, main = "Hierarchical Clustering Dendrogram for Top 100 Variable Genes", hang = -1)
# Cut the dendrogram at various heights to determine the number of clusters


cluster_counts <- 1:30  # Set the range of cluster counts you want to explore
result <- sapply(cluster_counts, function(k) length(unique(cutree(hclust_result, k))))

# Plot the number of clusters as a function of k (number of clusters)
plot(cluster_counts, result, type = "b", xlab = "Number of Clusters (k)", ylab = "Within-Cluster Sum of Squares (WCSS)")

/////////////////////////////////////////////////////////////////////////////////////
  
#TESTING
#Question 3

# ComplexHeatmap of only genes in this filter
# Use HeatmapAnnotation to make the annotations
install.packages("pheatmap")
library(pheatmap)
library(cluster)
library(ggplot2)
#library(gplots)
library(RColorBrewer)
library(ComplexHeatmap)
# Perform PAM clustering
k_pam <- 5  # Desired number of clusters for PAM
pam_result <- pam(top_5000_variable_genes, k_pam)

# Add PAM cluster assignments to your data
top_5000_variable_genes$Cluster_PAM <- pam_result$clustering

# K-Means clustering
kmeans_clusters <- kmeans(top_5000_variable_genes, centers = num_clusters)
top_5000_variable_genes$Cluster_KMeans <- kmeans_clusters$cluster

# Hclust clustering
# (Assuming you've already performed hierarchical clustering and obtained hclust_result)

# Convert hclust result to clusters using a certain height threshold
hclust_clusters <- cutree(hclust_result, h = 30)  
top_5000_variable_genes$Cluster_Hclust <- hclust_clusters

# You can add more clustering methods in a similar way if needed


# Read in data from results folder
expressed_path <- file.path("results", "diff_expressed_genes.tsv")
diffex_genes <- readr::read_tsv(expressed_path)
# Filters genes based on the specifications
significant_degs <- diffex_genes[diffex_genes$pvalue < 0.05 & abs(diffex_genes$log2FoldChange) > 2, ]


# Subset the expression data to include only the significant DEGs
expression_subset <- gene_matrix[rownames(gene_matrix) %in% significant_degs$Gene, ]

# Log-transform the data (if not already log-transformed)
expression_subset_log <- log2(expression_subset + 1)  # Adding 1 to avoid log(0)

#TESTING HELPPPPP MERGE METADATA$MUTATION_STATUS INTO TOP 5000 TO PUT INTO SAMPLE_GROUP
#metadata$mutation_status <- metadata$mutation_status[match(rownames(expression_subset_log), metadata$refinebio_accession_code)]



# Sample groups from Assignment 1
# Add sample group annotations (mutation_status)
merged_data <- merge(top_5000_variable_genes, metadata$mutation_status, by.x = "SampleID", by.y = "SampleID", all.x = TRUE)
top_5000_variable_genes$sample_group <- merged_data$mutation_status

sample_groups <- metadata$mutation_status
# Define the number of clusters from each method
num_clusters_pam <- k_pam
num_clusters_kmeans <- num_clusters
num_clusters_hclust <- max(hclust_clusters)

# Generate color palettes for clusters
colors_pam <- brewer.pal(num_clusters_pam, "Set1")
colors_kmeans <- brewer.pal(num_clusters_kmeans, "Set2")
colors_hclust <- brewer.pal(num_clusters_hclust, "Set3")

# Create a color vector for each clustering method
pam_colors <- colors_pam[pam_result$clustering]
kmeans_colors <- colors_kmeans[kmeans_clusters$cluster]
hclust_colors <- colors_hclust[hclust_clusters]

# Create a color matrix for the heatmap annotation
annotation_colors <- matrix(
  c(pam_colors, kmeans_colors, hclust_colors, sample_groups),
  ncol = 4,
  byrow = FALSE
)

# Create the heatmap with annotations
heatmap.2(
  as.matrix(top_5000_variable_genes[, 1:5000]),  # Include only the top 5000 genes
  Colv = FALSE,  # Turn off column clustering
  dendrogram = "row",
  col = colorRampPalette(c("blue", "white", "red"))(100),  # Color gradient for data
  trace = "none",  # Remove trace lines
  labRow = FALSE,  # Hide row labels
  labCol = FALSE,  # Hide column labels
  key = TRUE,
  keysize = 1,
  key.par = list(mar = c(5, 2, 1, 4)),
  symkey = FALSE,
  density.info = "none",
  cellnote = annotation_colors,  # Use the annotation colors
  notecol = "black",
  notecex = 1,
  Rowv = TRUE,
  main = "Heatmap with Annotations"
)

# DEVIN'S CODE
# Part 1
  # Load Data
data_dir <- file.path("data", "ERP109789")
data_file <- file.path(data_dir, "ERP109789.tsv")
file.exists(data_file)
data <- readr::read_tsv(data_file)
  # Load Metadata
metadata_file <- file.path(data_dir, "metadata_ERP109789.tsv")
file.exists(metadata_file)
metadata <- readr::read_tsv(metadata_file)
# Part 2a
geneNames <- data$Gene
data$Gene <- NULL
rownames(data) <- geneNames
data <- data.matrix(data)
mads <- apply(data,1,mad)
data_5000<-data[rev(order(mads))[1:5000],]
# Part 2b
  # Choose k value
k <- 10
  # CCP
BiocManager::install("ConsensusClusterPlus")
library(ConsensusClusterPlus)
ccp_results <- ConsensusClusterPlus(data_5000, maxK=k, reps=100, pItem=0.8, pFeature=1, distance="pearson", plot="png")
ccp_clusterList <- ccp_results[[10]][["consensusClass"]]
  # hclust
library(stats)
dm_5000 <- dist(t(data_5000), method = "euclidean")
hclust_dendogram <- hclust(dm_5000, method = "complete")
hclust_clusterList <- cutree(hclust_dendogram, k)
  # k-means
k_results <- kmeans(t(data_5000), k, iter.max = 100)
k_clusterList <- k_results$cluster
  # PAM clustering
library(cluster)
pam_results <- pam(t(data_5000), k)
pam_clusterList <- pam_results$clustering
# Part 2d
# Part 2e
  # Creating the appropriate matrices
data_10<-data[rev(order(mads))[1:10],]
data_100<-data[rev(order(mads))[1:100],]
data_1000<-data[rev(order(mads))[1:1000],]
data_10000<-data[rev(order(mads))[1:10000],]
  # CCP
ccp_clusterList_10 <- ConsensusClusterPlus(data_10, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")[[10]][["consensusClass"]]
ccp_clusterList_100 <- ConsensusClusterPlus(data_100, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")[[10]][["consensusClass"]]
ccp_clusterList_1000 <- ConsensusClusterPlus(data_1000, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")[[10]][["consensusClass"]]
ccp_clusterList_10000 <- ConsensusClusterPlus(data_10000, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")[[10]][["consensusClass"]]
  # hclust
dm_10 <- dist(t(data_10), method = "euclidean")
dm_100 <- dist(t(data_100), method = "euclidean")
dm_1000 <- dist(t(data_1000), method = "euclidean")
dm_10000 <- dist(t(data_10000), method = "euclidean")
hclust_clusterList_10 <- cutree(hclust(dm_10, method = "complete"), k)
hclust_clusterList_100 <- cutree(hclust(dm_100, method = "complete"), k)
hclust_clusterList_1000 <- cutree(hclust(dm_1000, method = "complete"), k)
hclust_clusterList_10000 <- cutree(hclust(dm_10000, method = "complete"), k)
  # k-means
k_clusterList_10 <- kmeans(t(data_10), k, iter.max = 100)$cluster
k_clusterList_100 <- kmeans(t(data_100), k, iter.max = 100)$cluster
k_clusterList_1000 <- kmeans(t(data_1000), k, iter.max = 100)$cluster
k_clusterList_10000 <- kmeans(t(data_10000), k, iter.max = 100)$cluster
  # PAM clustering
pam_clusterList_10 <- pam(t(data_10), k)$clustering
pam_clusterList_100 <- pam(t(data_100), k)$clustering
pam_clusterList_1000 <- pam(t(data_1000), k)$clustering
pam_clusterList_10000 <- pam(t(data_10000), k)$clustering
# Part 3a
# Part 4a
chisqTable <- data.frame(matrix(nrow = 4, ncol = 2))
colnames(chisqTable) <- c("Unadjusted", "Adjusted")
rownames(chisqTable) <- c("CCP", "hclust", "k-means", "PAM") # CHANGE THESE TO METHOD NAMES

chisqTable[1,1] <- chisq.test(metadata$stimulus, ccp_clusterList)$p.value
chisqTable[2,1] <- chisq.test(metadata$stimulus, hclust_clusterList)$p.value
chisqTable[3,1] <- chisq.test(metadata$stimulus, k_clusterList)$p.value
chisqTable[4,1] <- chisq.test(metadata$stimulus, pam_clusterList)$p.value

chisqTable[,2] <- p.adjust(chisqTable[,1])


#SAVE INCASE BUT DOESN'T WORK

# ComplexHeatmap of only genes in this filter
# Use HeatmapAnnotation to make the annotations
install.packages("pheatmap")
install.packages("gplots")
library(pheatmap)
library(cluster)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(ComplexHeatmap)
# Perform PAM clustering
k_pam <- 5  # Desired number of clusters for PAM
pam_result <- pam(top_5000_variable_genes, k_pam)

# Add PAM cluster assignments to your data
top_5000_variable_genes$Cluster_PAM <- pam_result$clustering

# K-Means clustering
kmeans_clusters <- kmeans(top_5000_variable_genes, centers = num_clusters)
top_5000_variable_genes$Cluster_KMeans <- kmeans_clusters$cluster

# Hclust clustering
# (Assuming you've already performed hierarchical clustering and obtained hclust_result)

# Convert hclust result to clusters using a certain height threshold
hclust_clusters <- cutree(hclust_result, h = 30)  
top_5000_variable_genes$Cluster_Hclust <- hclust_clusters

# ConsensusClusterPlus clustering
# Add ConsensusClusterPlus cluster assignments to your data
consensus_clusters <- results$consensusClass
top_5000_variable_genes$Cluster_Consensus <- consensus_clusters

# You can add more clustering methods in a similar way if needed

# Sample groups from Assignment 1
# Add sample group annotations (mutation_status)

sample_groups <- metadata$mutation_status
# Define the number of clusters from each method
num_clusters_pam <- k_pam
num_clusters_kmeans <- num_clusters
num_clusters_hclust <- max(hclust_clusters)
num_clusters_consensus <- max(consensus_clusters)

# Generate color palettes for clusters
colors_pam <- brewer.pal(num_clusters_pam, "Set1")
colors_kmeans <- brewer.pal(num_clusters_kmeans, "Set2")
colors_hclust <- brewer.pal(num_clusters_hclust, "Set3")

# Define a custom color palette for ConsensusClusterPlus clusters
custom_palette <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd")
colors_consensus <- custom_palette[consensus_clusters]

# Create a color vector for each clustering method
pam_colors <- colors_pam[pam_result$clustering]
kmeans_colors <- colors_kmeans[kmeans_clusters$cluster]
hclust_colors <- colors_hclust[hclust_clusters]
consensus_colors <- colors_consensus[consensus_clusters]

# Create a color matrix for the heatmap annotation
#annotation_colors <- matrix(
#  c(pam_colors, kmeans_colors, hclust_colors, consensus_colors, sample_groups),
#  ncol = ncol(heatmap_data),
#  byrow = FALSE
#)

# Ensure annotation_colors has the correct dimensions
annotation_colors <- matrix(
  c(pam_colors, kmeans_colors, hclust_colors, consensus_colors, sample_groups),
  ncol = ncol(heatmap_data),
  byrow = FALSE
)

# Create the heatmap with annotations
heatmap_data <- as.matrix(top_5000_variable_genes[1:5000, ])  # Include only the top 5000 genes

# Create the heatmap with annotations

# heatmap.2(
#   heatmap_data,
#   Colv = FALSE,  # Turn off column clustering
#   Rowv = FALSE,  # Turn off row clustering
#   col = colorRampPalette(c("blue", "white", "red"))(100),  # Color gradient for data
#   trace = "none",  # Remove trace lines
#   labRow = FALSE,  # Hide row labels
#   labCol = FALSE,  # Hide column labels
#   key = TRUE,
#   keysize = 1,
#   key.par = list(mar = c(5, 2, 1, 4)),
#   symkey = FALSE,
#   density.info = "none",
#   cellnote = annotation_colors,  # Use the annotation colors
#   notecol = "black",
#   notecex = 1,
#   main = "Heatmap with Annotations"
# )

# Create the heatmap with annotations, without dendrograms
heatmap.2(
  heatmap_data,
  Colv = FALSE,  # Turn off column clustering and dendrogram
  Rowv = FALSE,  # Turn off row clustering and dendrogram
  col = colorRampPalette(c("blue", "white", "red"))(100),  # Color gradient for data
  trace = "none",  # Remove trace lines
  labRow = FALSE,  # Hide row labels
  labCol = FALSE,  # Hide column labels
  key = TRUE,
  keysize = 1,
  key.par = list(mar = c(5, 2, 1, 4)),
  symkey = FALSE,
  density.info = "none",
  cellnote = annotation_colors,  # Use the annotation colors
  notecol = "black",
  notecex = 1,
  main = "Heatmap with Annotations"
)


#TAKE 500 AS I LOSE

# Part 1
# Load Data
data_dir <- file.path("data", "ERP109789")
data_file <- file.path(data_dir, "ERP109789.tsv")
file.exists(data_file)
data <- readr::read_tsv(data_file)
# Load Metadata
metadata_file <- file.path(data_dir, "metadata_ERP109789.tsv")
file.exists(metadata_file)
metadata <- readr::read_tsv(metadata_file)
# Part 2a
geneNames <- data$Gene
data$Gene <- NULL
rownames(data) <- geneNames
data <- data.matrix(data)
mads <- apply(data,1,mad)
data_5000<-data[rev(order(mads))[1:5000],]
# Part 2b
# Choose k value
k <- 10
# CCP
BiocManager::install("ConsensusClusterPlus")
library(ConsensusClusterPlus)
title <- tempdir()
ccp_results <- ConsensusClusterPlus(data_5000, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")
ccp_clusterList <- ccp_results[[10]][["consensusClass"]]
# hclust
library(stats)
dm_5000 <- dist(t(data_5000), method = "euclidean")
hclust_dendogram <- hclust(dm_5000, method = "complete")
hclust_clusterList <- cutree(hclust_dendogram, k)


# Load required libraries
install.packages("pheatmap")
library(pheatmap)
install.packages("magick")
library(magick)
install.packages("Cairo")
library(Cairo)

# Create a data frame with cluster assignments from CCP
cluster_assignments <- ccp_clusterList

# Generate a color palette for the clusters
cluster_colors <- colorRampPalette(brewer.pal(10, "Set1"))(k)

# Create a heatmap with annotations
pheatmap(
  as.matrix(data_5000),
  annotation_col = data.frame(Cluster = cluster_assignments),
  annotation_colors = list(Cluster = cluster_colors),
  display_numbers = FALSE,
  cluster_rows = FALSE,
  cluster_cols = FALSE,
  use_raster = TRUE,
  main = "ConsensusClusterPlus Heatmap",
  filename = "heatmap.png"  # Change the file format as needed
)
