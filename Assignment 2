# Converting Ensembl IDs to Hugo Gene Names
-------------------------------------------
This should all be done in an R Script File.
First, create a folder called "data" in home files.
Second, create a folder called "results" in home files.
Third, make sure folder with data is also in home files named appropriately.
Fourth, run the following commands in RStudio Script.


# Install the Zebrafish package
if (!("org.Hs.eg.db" %in% installed.packages())) {
  # Install this package if it isn't installed yet
  BiocManager::install("org.Hs.eg.db", update = FALSE)
}

# Attach the library
library(org.Hs.eg.db)

# We will need this so we can use the pipe: %>%
library(magrittr)

data_dir <- file.path("data", "ERP109789")

results_dir<-file.path("results")

data_file <- file.path(data_dir, "ERP109789.tsv")

metadata_file <- file.path(data_dir, "metadata_ERP109789.tsv")

file.exists(data_file)

file.exists(metadata_file)

metadata <- readr::read_tsv(metadata_file)
# Read in data TSV file
expression_df <- readr::read_tsv(data_file) %>%
  # Tuck away the Gene ID column as row names
  tibble::column_to_rownames("Gene")

# Make the data in the order of the metadata
expression_df <- expression_df %>%
  dplyr::select(metadata$refinebio_accession_code)

# Check if this is in the same order
all.equal(colnames(expression_df), metadata$refinebio_accession_code)

# Bring back the "Gene" column in preparation for mapping
expression_df <- expression_df %>%
  tibble::rownames_to_column("Gene")

# Map Ensembl IDs to their associated Entrez IDs
mapped_list <- mapIds(
  org.Hs.eg.db, # Replace with annotation package for your organism
  keys = expression_df$Gene,
  keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
  column = "SYMBOL", # The type of gene identifiers you would like to map to
  multiVals = "first"
)

# Let's use the `head()` function for a preview of our mapped list
head(mapped_list)

# Let's make our list a bit more manageable by turning it into a data frame
mapped_df <- mapped_list %>%
  tibble::enframe(name = "Ensembl", value = "Entrez") %>%
  # enframe() makes a list column; we will simplify it with unnest()
  # This will result in one row of our data frame per list item
  tidyr::unnest(cols = Entrez)

#Move data to original chart
expression_df$Gene <- mapped_df$Entrez

# Write mapped and annotated data frame to output file
readr::write_tsv(expression_df, file.path(
  results_dir,
  "ERP109789.tsv" # Replace with a relevant output file name
))

# Question 1
-------------------------------------------
# Load the data
data <- read.table(data_file, header = TRUE, sep = "\t")
# Log-scale the data (assuming gene expression values start from column 2)
data[, 2:ncol(data)] <- log(data[, 2:ncol(data)])
# Calculate per-gene median expression ranges
gene_median_ranges <- apply(data[, 2:ncol(data)], 2, function(x) diff(range(x)))
# Create a density plot of per-gene median expression ranges
density_plot <- density(gene_median_ranges)
plot(density_plot, main = "Density Plot of Per-Gene Median Expression Ranges")

# Question 2
-------------------------------------------
