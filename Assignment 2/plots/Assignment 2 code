# Question 1
#-------------------------------------------
# Converting Ensembl IDs to Hugo Gene Names
#-------------------------------------------
#This should all be done in an R Script File.
#First, create a folder called "data" in home files.
#Second, create a folder called "results" in home files.
#Third, make sure folder with data is also in home files named appropriately.
#Fourth, run the following commands in RStudio Script.


# Install the Zebrafish package
if (!("org.Hs.eg.db" %in% installed.packages())) {
  # Install this package if it isn't installed yet
  BiocManager::install("org.Hs.eg.db", update = FALSE)
}

# Attach the library
library(org.Hs.eg.db)

# We will need this so we can use the pipe: %>%
library(magrittr)

data_dir <- file.path("data", "ERP109789")

results_dir<-file.path("results")

data_file <- file.path(data_dir, "ERP109789.tsv")

metadata_file <- file.path(data_dir, "metadata_ERP109789.tsv")

file.exists(data_file)

file.exists(metadata_file)

metadata <- readr::read_tsv(metadata_file)

expression_df <- readr::read_tsv(data_file) %>%
  # Tuck away the Gene ID column as row names
  tibble::column_to_rownames("Gene")

expression_df <- expression_df %>%
  dplyr::select(metadata$refinebio_accession_code)

all.equal(colnames(expression_df), metadata$refinebio_accession_code)

expression_df <- expression_df %>%
  tibble::rownames_to_column("Gene")

count_hugo <- mapIds(
  org.Hs.eg.db, # Replace with annotation package for your organism
  keys = expression_df$Gene,
  keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
  column = "SYMBOL", # The type of gene identifiers you would like to map to
  multiVals = "first"
)

head(count_hugo)


# Question 1c
-------------
# Moved from Earlier
# Read in data TSV file & Make the data in the order of the metadata
expression_df <- readr::read_tsv(data_file) %>%
  tibble::column_to_rownames("Gene") %>% dplyr::select(metadata$refinebio_accession_code)

# Check if this is in the same order
all.equal(colnames(expression_df), metadata$refinebio_accession_code)

head(metadata$refinebio_title)

# Simplify Condition to be Treated vs Reference instead of multiple treatments
metadata <- metadata %>%
  dplyr::mutate(mutation_status = dplyr::case_when(
    stringr::str_detect(stimulus, "brain-derived neurotrophic factor") ~ "treated",
    stringr::str_detect(stimulus, "TrkB agonist antibody ZEB85") ~ "treated",
    stringr::str_detect(stimulus, "neurotrophin-4") ~ "treated",
    stringr::str_detect(stimulus, "none") ~ "reference"
  ))

# Filter rows with less than 10 counts total in all samples
filtered_expression_df <- expression_df %>%
  dplyr::filter(rowSums(.) >= 10)

gene_matrix <- round(filtered_expression_df)

metadata <- metadata %>%
  dplyr::mutate(
    # Here we define the values our factor variable can have and their order.
    mutation_status = factor(mutation_status, levels = c("reference", "treated"))
  )

# Make rowname column temporarily to do HUGO conversion
temp <- tibble::rownames_to_column(gene_matrix, var = "Gene")


# Change to HUGO names
count_hugo <- data.frame("HUGO" = mapIds(
  org.Hs.eg.db, # Replace with annotation package for your organism
  keys = temp$Gene,
  keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
  column = "SYMBOL", # The type of gene identifiers you would like to map to
  multiVals = "first"
),temp)

# Remove Duplicates
count_hugo <- count_hugo[!duplicated(count_hugo$HUGO),]

# Remove extra columns and make HUGO genes new rownames
count_hugo <- dplyr::select(count_hugo, -Gene)
count_hugo <- tibble::remove_rownames(count_hugo)
#removes N/A points
count_hugo <- na.omit(count_hugo)
#Makes rownames the HUGO names
count_hugo <- tibble::column_to_rownames(count_hugo,var = "HUGO")


# Counts File after all of the preprocessing (use for TSNE, Density Plot, Heatmap, and Differential Expression)
# write.csv(count_hugo, file="counts.csv")


# Load the data
data <- read.table(data_file, header = TRUE, sep = "\t")
# Log-scale the data (assuming gene expression values start from column 2)
log_counts <- log(count_hugo, base = 2)
# Calculate per-gene median expression ranges
gene_median_ranges <- apply(log_counts, 2, function(x) diff(range(x)))
# Create a density plot of per-gene median expression ranges
density_plot <- density(gene_median_ranges)
plot(density_plot, main = "Density Plot of Per-Gene Median Expression Ranges")

# Question 2
-------------------------------------------
#PCA Plot
# Install DESeq2
BiocManager::install("DESeq2")
library(DESeq2)
library("ggplot2")

# DESeq
ddset <- DESeqDataSetFromMatrix(
  # Here we supply non-normalized count data
  countData = count_hugo,
  # Supply the `colData` with our metadata data frame
  colData = metadata,
  # Supply our experimental variable to `design`
  design = ~ mutation_status
)

vsd <- vst(ddset, blind = FALSE)

# Create the PCA plot
pca_plot <- plotPCA(vsd, intgroup = "mutation_status") + ggtitle("PCA Plot of Expression Data")
pca_plot

# TSNE Plot
BiocManager::install("M3C")
library(M3C)
tsne(count_hugo[,0:191],perplex = 10, labels = metadata$mutation_status, text = FALSE)

# load your omic data here as mydata
#BiocManager::install("M3C")
#library(M3C)
#tsne_result <- tsne(expression_df, labels = as.factor(expression_df$Gene))

# DESeq Continued

deseq_object <- DESeq(ddset)

deseq_results <- results(deseq_object)

#deseq_results <- lfcShrink(
#  deseq_object, # The original DESeq2 object after running DESeq()
#  coef = 2, # The log fold change coefficient used in DESeq(); the default is 2.
#  res = deseq_results # The original DESeq2 results table
#)

# Question 3
-------------------------------------------
 # We will need this so we can use the pipe: %>%
library(magrittr)

set.seed(12345)

# Read in metadata TSV file
metadata <- readr::read_tsv(metadata_file)

# Read in data TSV file
expression_df <- readr::read_tsv(data_file) %>%
  tibble::column_to_rownames("Gene")

# Make the data in the order of the metadata
expression_df <- expression_df %>%
  dplyr::select(metadata$refinebio_accession_code)

# Check if this is in the same order
all.equal(colnames(expression_df), metadata$refinebio_accession_code)

head(metadata$refinebio_title)

metadata <- metadata %>%
  # Let's get the RPL10 mutation status from this variable
  dplyr::mutate(given_treatment = dplyr::case_when(
    stringr::str_detect(stimulus, "brain") ~ "treatment",
    stringr::str_detect(stimulus, "neurotrophin") ~ "treatment",
    stringr::str_detect(stimulus, "TrkB") ~ "treatment",
    stringr::str_detect(stimulus, "none") ~ "reference"
  ))

# Let's take a look at the original metadata column's info
# and our new `given_treatment` column
dplyr::select(metadata, stimulus, given_treatment)

# Print out a preview of `given_treatment`
str(metadata$given_treatment)

# Make stimulus a factor and set the levels appropriately
metadata <- metadata %>%
  dplyr::mutate(
    # Here we define the values our factor variable can have and their order.
    given_treatment = factor(given_treatment, levels = c("reference", "treatment"))
  )

levels(metadata$given_treatment)

# Define a minimum counts cutoff and filter the data to include
# only rows (genes) that have total counts above the cutoff
filtered_expression_df <- expression_df %>%
  dplyr::filter(rowSums(.) >= 10)

# round all expression counts
gene_matrix <- round(filtered_expression_df)

ddset <- DESeqDataSetFromMatrix(
  # Here we supply non-normalized count data
  countData = gene_matrix,
  # Supply the `colData` with our metadata data frame
  colData = metadata,
  # Supply our experimental variable to `design`
  design = ~given_treatment
)

deseq_object <- DESeq(ddset)

deseq_results <- results(deseq_object)

deseq_results <- lfcShrink(
  deseq_object, # The original DESeq2 object after running DESeq()
  coef = 2, # The log fold change coefficient used in DESeq(); the default is 2.
  res = deseq_results # The original DESeq2 results table
)

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("apeglm")

head(deseq_results)

# this is of class DESeqResults -- we want a data frame
deseq_df <- deseq_results %>%
  # make into data.frame
  as.data.frame() %>%
  # the gene names are row names -- let's make them a column for easy display
  tibble::rownames_to_column("Gene") %>%
  # add a column for significance threshold results
  dplyr::mutate(threshold = padj < 0.05) %>%
  # sort by statistic -- the highest values will be genes with
  # higher expression in RPL10 mutated samples
  dplyr::arrange(dplyr::desc(log2FoldChange))

head(deseq_df)

plotCounts(ddset, gene = "ENSG00000120738", intgroup = "stimulus")

readr::write_tsv(
  deseq_df,
  file.path(
    results_dir,
    "ERP109789_diff_expr_results.tsv"
  )
)

# We'll assign this as `volcano_plot`
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
  deseq_df,
  lab = deseq_df$Gene,
  x = "log2FoldChange",
  y = "padj",
  pCutoff = 0.01 # Loosen the cutoff since we supplied corrected p-values
)

volcano_plot

# Filter based on p-value
diff_expressed_genes <- subset(deseq_df, threshold == TRUE)

readr::write_tsv(
  diff_expressed_genes,
  file.path(
    results_dir,
    "diff_expressed_genes.tsv"
  )
)

# Question 4
-------------------------------------------
# Get results into data_frame, filter only genes that have p-value of 0.05 or less

# ComplexHeatmap of only genes in this filter
  # Use HeatmapAnnotation to make the annotations
library(ComplexHeatmap)
library(circlize)
install.packages("devtools")
library(devtools)
install_github("jokergoo/ComplexHeatmap")

expressed_path <- file.path("results", "diff_expressed_genes.tsv")
diffex_genes <- readr::read_tsv(expressed_path)
significant_degs <- diffex_genes[diffex_genes$pvalue < 0.05 & abs(diffex_genes$log2FoldChange) > 2, ]


# Subset the expression data to include only the significant DEGs
expression_subset <- gene_matrix[rownames(gene_matrix) %in% significant_degs$Gene, ]

# Log-transform the data (if not already log-transformed)
expression_subset_log <- log2(expression_subset + 1)  # Adding 1 to avoid log(0)

annot = HeatmapAnnotation(
  df = data.frame(Group = metadata$mutation_status),
  col = list(Group = c("reference" = "red", "treated" = "blue")),
  show_legend = TRUE
)

expression_matrix <- as.matrix(expression_subset_log)

column_name_font_size <- 1

# Create Heatmap
Heatmap(
  expression_matrix,
  name = "Log2 FC",
  col = colorRamp2(c(-5, 0, 5), colors = c("blue", "white", "red")),  # Color scheme
  cluster_rows = TRUE,  # Do not cluster rows
  cluster_columns = TRUE,  # Do not cluster columns
  column_title = "Samples",
  row_title = "Genes",
  column_title_side = "top",
  show_row_names = FALSE,  # Hide row names
  show_column_names = TRUE,
  heatmap_legend_param = list(title = "Expression"),
  top_annotation = annot,
  column_names_gp = gpar(fontsize = column_name_font_size) 
)


# Question 5
-------------------------------------------
# Gene Ontology - CLUSTERPROFILER
BiocManager::install("clusterProfiler")
library(clusterProfiler)

ego <- enrichGO(gene = diffex_genes$Gene,
                 OrgDb = org.Hs.eg.db,
                 keyType = 'ENSEMBL',
                 ont = "CC")
cpontology <- ego@result


# Gene Ontology - GPROFILER2
BiocManager::install("gprofiler2")
library(gprofiler2)

gostres <- gost(query = diffex_genes$Gene, 
                organism = "hsapiens", ordered_query = FALSE, 
                multi_query = FALSE, significant = TRUE, exclude_iea = FALSE, 
                measure_underrepresentation = TRUE, evcodes = FALSE, 
                user_threshold = 0.05, correction_method = "g_SCS", 
                domain_scope = "annotated", custom_bg = NULL, 
                numeric_ns = "", sources = NULL, as_short_link = FALSE, highlight = TRUE)
gpontology <- gostres$result

readr::write_tsv(
  gostres$result,
  file.path(
    results_dir,
    "gprofiler_enrichment.tsv"
  )
)
# Conversion to treated & reference:
metadata <- metadata %>%
  dplyr::mutate(treatment_status= dplyr::case_when(
    stringr::str_detect(stimulus, "brain") ~ "treated",
    stringr::str_detect(stimulus, "TrkB") ~ "treated",
    stringr::str_detect(stimulus, "neurotrophin") ~ "treated",
    stringr::str_detect(stimulus, "none") ~ "reference"
  )) 

# Question 6
-------------------------------------------
#gProfiler2 Table of enriched processes

# Check if the gene expression matrix file is at the path stored in `data_file`
file.exists(data_file)

# Check if the metadata file is at the file path stored in `metadata_file`
file.exists(metadata_file)

if (!("DESeq2" %in% installed.packages())) {
  # Install this package if it isn't installed yet
  BiocManager::install("DESeq2", update = FALSE)
}
if (!("EnhancedVolcano" %in% installed.packages())) {
  # Install this package if it isn't installed yet
  BiocManager::install("EnhancedVolcano", update = FALSE)
}
if (!("apeglm" %in% installed.packages())) {
  # Install this package if it isn't installed yet
  BiocManager::install("apeglm", update = FALSE)
}

# Attach the DESeq2 library
library(DESeq2)

# Attach the ggplot2 library for plotting
library(ggplot2)

# We will need this so we can use the pipe: %>%
library(magrittr)

set.seed(12345)

# Read in metadata TSV file
metadata <- readr::read_tsv(metadata_file)

# Read in data TSV file
expression_df <- readr::read_tsv(data_file) %>%
  tibble::column_to_rownames("Gene")

# Make the data in the order of the metadata
expression_df <- expression_df %>%
  dplyr::select(metadata$refinebio_accession_code)

# Check if this is in the same order
all.equal(colnames(expression_df), metadata$refinebio_accession_code)

head(metadata$refinebio_title)

metadata <- metadata %>%
  dplyr::mutate(mutation_status = dplyr::case_when(
    stringr::str_detect(refinebio_title, "brain") ~ "treated",
    stringr::str_detect(refinebio_title, "TrkB") ~ "treated",
    stringr::str_detect(refinebio_title, "neurotrophin") ~ "treated",
    stringr::str_detect(refinebio_title, "none") ~ "reference"
  ))

# Let's take a look at the original metadata column's info
# and our new `mutation_status` column
dplyr::select(metadata, refinebio_title, mutation_status)

# Print out a preview of `mutation_status`
str(metadata$mutation_status)

# Make mutation_status a factor and set the levels appropriately
metadata <- metadata %>%
  dplyr::mutate(
    # Here we define the values our factor variable can have and their order.
    mutation_status = factor(mutation_status, levels = c("reference", "R98S"))
  )

levels(metadata$mutation_status)

# Define a minimum counts cutoff and filter the data to include
# only rows (genes) that have total counts above the cutoff
filtered_expression_df <- expression_df %>%
  dplyr::filter(rowSums(.) >= 10)

# round all expression counts
gene_matrix <- round(filtered_expression_df)

ddset <- DESeqDataSetFromMatrix(
  # Here we supply non-normalized count data
  countData = gene_matrix,
  # Supply the `colData` with our metadata data frame
  colData = metadata,
  # Supply our experimental variable to `design`
  design = ~mutation_status
)

deseq_object <- DESeq(ddset)

deseq_results <- results(deseq_object)

deseq_results <- lfcShrink(
  deseq_object, # The original DESeq2 object after running DESeq()
  coef = 2, # The log fold change coefficient used in DESeq(); the default is 2.
  res = deseq_results # The original DESeq2 results table
)

head(deseq_results)
message.txt
