# Question 1
if (!("org.Hs.eg.db" %in% installed.packages())) {
  # Install this package if it isn't installed yet
  BiocManager::install("org.Hs.eg.db", update = FALSE)
}

# Attach the library
library(org.Hs.eg.db)

# We will need this so we can use the pipe: %>%
library(magrittr)

 # Load Data
data_dir <- file.path("data", "ERP109789")
data_file <- file.path(data_dir, "ERP109789.tsv")
file.exists(data_file)
data <- readr::read_tsv(data_file)

  # Load Metadata
metadata_file <- file.path(data_dir, "metadata_ERP109789.tsv")
file.exists(metadata_file)
metadata <- readr::read_tsv(metadata_file)
# Part 2a
geneNames <- data$Gene
data$Gene <- NULL
rownames(data) <- geneNames
data <- data.matrix(data)
mads <- apply(data,1,mad)
data_5000<-data[rev(order(mads))[1:5000],]

######################################################################################################
#
# Assignment 3
# Question 2a
geneNames <- data$Gene
data$Gene <- NULL
rownames(data) <- geneNames
data <- data.matrix(data)
mads <- apply(data,1,mad)
data_5000<-data[rev(order(mads))[1:5000],]
# Part 2b
  # Choose k value
k <- 10
  # CCP
BiocManager::install("ConsensusClusterPlus")
library(ConsensusClusterPlus)
ccp_results <- ConsensusClusterPlus(data_5000, maxK=k, reps=100, pItem=0.8, pFeature=1, distance="pearson", plot="png")
ccp_clusterList <- ccp_results[[10]][["consensusClass"]]
  # hclust
library(stats)
dm_5000 <- dist(t(data_5000), method = "euclidean")
hclust_dendogram <- hclust(dm_5000, method = "complete")
hclust_clusterList <- cutree(hclust_dendogram, k)
  # k-means
k_results <- kmeans(t(data_5000), k, iter.max = 100)
k_clusterList <- k_results$cluster
  # PAM clustering
library(cluster)
pam_results <- pam(t(data_5000), k)
pam_clusterList <- pam_results$clustering
# Part 2d
# Part 2e
  # Creating the appropriate matrices
data_10<-data[rev(order(mads))[1:10],]
data_100<-data[rev(order(mads))[1:100],]
data_1000<-data[rev(order(mads))[1:1000],]
data_10000<-data[rev(order(mads))[1:10000],]
  # CCP
ccp_clusterList_10 <- ConsensusClusterPlus(data_10, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")[[10]][["consensusClass"]]
ccp_clusterList_100 <- ConsensusClusterPlus(data_100, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")[[10]][["consensusClass"]]
ccp_clusterList_1000 <- ConsensusClusterPlus(data_1000, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")[[10]][["consensusClass"]]
ccp_clusterList_10000 <- ConsensusClusterPlus(data_10000, maxK=k, reps=100, pItem=0.8, pFeature=1, title = title, distance="pearson", plot="png")[[10]][["consensusClass"]]
  # hclust
dm_10 <- dist(t(data_10), method = "euclidean")
dm_100 <- dist(t(data_100), method = "euclidean")
dm_1000 <- dist(t(data_1000), method = "euclidean")
dm_10000 <- dist(t(data_10000), method = "euclidean")
hclust_clusterList_10 <- cutree(hclust(dm_10, method = "complete"), k)
hclust_clusterList_100 <- cutree(hclust(dm_100, method = "complete"), k)
hclust_clusterList_1000 <- cutree(hclust(dm_1000, method = "complete"), k)
hclust_clusterList_10000 <- cutree(hclust(dm_10000, method = "complete"), k)
  # k-means
k_clusterList_10 <- kmeans(t(data_10), k, iter.max = 100)$cluster
k_clusterList_100 <- kmeans(t(data_100), k, iter.max = 100)$cluster
k_clusterList_1000 <- kmeans(t(data_1000), k, iter.max = 100)$cluster
k_clusterList_10000 <- kmeans(t(data_10000), k, iter.max = 100)$cluster
  # PAM
pam_clusterList_10 <- pam(t(data_10), k)$clustering
pam_clusterList_100 <- pam(t(data_100), k)$clustering
pam_clusterList_1000 <- pam(t(data_1000), k)$clustering
pam_clusterList_10000 <- pam(t(data_10000), k)$clustering


###### Extra?
# Question 2b
# K-Means
install.packages("stats")
install.packages("ggplot2")

# Load libraries
library(stats)
library(ggplot2)

# Assuming top_5000_variable_genes contains your data
# If not, load your data into this variable.

# Specify the number of clusters (you can change this value)
num_clusters <- 3

# Perform K-means clustering
kmeans_result_5000 <- kmeans(top_5000_variable_genes, centers = num_clusters)

# Add cluster assignments to your data
top_5000_variable_genes$cluster <- kmeans_result_5000$cluster

# Create a cluster plot
pca_result_5000 <- prcomp(top_5000_variable_genes[, -ncol(top_5000_variable_genes)], scale. = TRUE)

# Create a data frame with the PCA results and cluster assignments
pca_data_5000 <- data.frame(PC1 = pca_result_5000$x[, 1], PC2 = pca_result$x[, 2], Cluster = top_5000_variable_genes$cluster)

# Plot the data
ggplot(data = pca_data_5000, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "K-means Clustering (Top 5000)", x = "PC1", y = "PC2") +
  scale_color_discrete(name = "Cluster")

# Perform K-means clustering on top_10_variable_genes
kmeans_result_10 <- kmeans(top_10_variable_genes, centers = num_clusters)

# Add cluster assignments to your data
top_10_variable_genes$cluster <- kmeans_result_10$cluster

# Create a cluster plot for top_1000_variable_genes
pca_result_10 <- prcomp(top_10_variable_genes[, -ncol(top_10_variable_genes)], scale. = TRUE)

# Create a data frame with the PCA results and cluster assignments
pca_data_10 <- data.frame(PC1 = pca_result_10$x[, 1], PC2 = pca_result$x[, 2], Cluster = top_10_variable_genes$cluster)

# Plot the data for top_1000_variable_genes
ggplot(data = pca_data_10, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "K-means Clustering (Top 10)", x = "PC1", y = "PC2") +
  scale_color_discrete(name = "Cluster")
#cluster_assignments <- pam_result$clustering

# Perform K-means clustering on top_100_variable_genes
kmeans_result_100 <- kmeans(top_100_variable_genes, centers = num_clusters)

# Add cluster assignments to your data
top_100_variable_genes$cluster <- kmeans_result_100$cluster

# Create a cluster plot for top_1000_variable_genes
pca_result_100 <- prcomp(top_100_variable_genes[, -ncol(top_100_variable_genes)], scale. = TRUE)

# Create a data frame with the PCA results and cluster assignments
pca_data_100 <- data.frame(PC1 = pca_result_100$x[, 1], PC2 = pca_result$x[, 2], Cluster = top_100_variable_genes$cluster)

# Plot the data for top_1000_variable_genes
ggplot(data = pca_data_100, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "K-means Clustering (Top 100)", x = "PC1", y = "PC2") +
  scale_color_discrete(name = "Cluster")
#cluster_assignments <- pam_result$clustering

# Perform K-means clustering on top_1000_variable_genes
kmeans_result_1000 <- kmeans(top_1000_variable_genes, centers = num_clusters)

# Add cluster assignments to your data
top_1000_variable_genes$cluster <- kmeans_result_1000$cluster

# Create a cluster plot for top_1000_variable_genes
pca_result_1000 <- prcomp(top_1000_variable_genes[, -ncol(top_1000_variable_genes)], scale. = TRUE)

# Create a data frame with the PCA results and cluster assignments
pca_data_1000 <- data.frame(PC1 = pca_result_1000$x[, 1], PC2 = pca_result$x[, 2], Cluster = top_1000_variable_genes$cluster)

# Plot the data for top_1000_variable_genes
ggplot(data = pca_data_1000, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "K-means Clustering (Top 1,000)", x = "PC1", y = "PC2") +
  scale_color_discrete(name = "Cluster")
#cluster_assignments <- pam_result$clustering

# Perform K-means clustering on top_10000_variable_genes
kmeans_result_10000 <- kmeans(top_10000_variable_genes, centers = num_clusters)

# Add cluster assignments to your data
top_10000_variable_genes$cluster <- kmeans_result_10000$cluster

# Create a cluster plot for top_10000_variable_genes
pca_result_10000 <- prcomp(top_10000_variable_genes[, -ncol(top_10000_variable_genes)], scale. = TRUE)

# Create a data frame with the PCA results and cluster assignments
pca_data_10000 <- data.frame(PC1 = pca_result_10000$x[, 1], PC2 = pca_result$x[, 2], Cluster = top_10000_variable_genes$cluster)

# Plot the data for top_10000_variable_genes
ggplot(data = pca_data_10000, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "K-means Clustering (Top 10,000)", x = "PC1", y = "PC2") +
  scale_color_discrete(name = "Cluster")

######################################################################################################
#Question 2b -	Hierarchical clustering (hclust)

#top 10 hclustering
top_10_variable_genes <- count_hugo[gene_ranking[1:10], ]
distance_matrix <- dist(top_10_variable_genes, method = "euclidean")
hclust_result_10 <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result_10, main = "Hierarchical Clustering Dendrogram for Top 10 Variable Genes", hang = -1)

#top 100 hclustering
# Top 100
top_100_variable_genes <- count_hugo[gene_ranking[1:100], ]
distance_matrix <- dist(top_100_variable_genes, method = "euclidean")
hclust_resul_100t <- hclust(distance_matrix, method = "ward.D2")

options(repr.plot.width = 10, repr.plot.height = 10)
# Plot the rotated hierarchical clustering dendrogram with smaller font size
par(cex = 0.5)  # Adjust the font size

# Plot the dendrogram
plot(hclust_result_100, main = "Hierarchical Clustering Dendrogram for Top 100 Variable Genes", hang = -1)

# Top 1000 hclustering
top_1000_variable_genes <- count_hugo[gene_ranking[1:1000], ]
distance_matrix <- dist(top_1000_variable_genes, method = "euclidean")
hclust_result_1000 <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result_1000, main = "Hierarchical Clustering Dendrogram for Top 1000 Variable Genes", hang = -1)

# Top 5000 hclustering
top_5000_variable_genes <- count_hugo[gene_ranking[1:5000], ]
distance_matrix <- dist(top_5000_variable_genes, method = "euclidean")
hclust_result_5000 <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result_5000, main = "Hierarchical Clustering Dendrogram for Top 5000 Variable Genes", hang = -1)

# Top 10000
top_10000_variable_genes <- count_hugo[gene_ranking[1:10000], ]
distance_matrix <- dist(top_10000_variable_genes, method = "euclidean")
hclust_result_10000 <- hclust(distance_matrix, method = "ward.D2")
options(repr.plot.width = 10, repr.plot.height = 10)
par(cex = 0.5)  # Adjust the font size
plot(hclust_result_10000, main = "Hierarchical Clustering Dendrogram for Top 10000 Variable Genes", hang = -1)


#Question 2b - PAM Clustering 
install.packages("cluster")

# Load the required library
library(cluster)
library(ggplot2)  # For creating the scatter plot

# Perform PAM clustering
# Specify the number of clusters (k) in the 'k' parameter
k <- 5  # Desired number of clusters
pam_result <- pam(top_5000_variable_genes, k)

# Create a data frame with cluster assignments
data_with_clusters <- data.frame(top_5000_variable_genes, Cluster = pam_result$clustering)

# Create a scatter plot using two principal components (you can adjust this for your data)
pca <- prcomp(top_5000_variable_genes)
data_with_clusters <- cbind(data_with_clusters, as.data.frame(pca$x[,1:2]))

# Create a scatter plot
ggplot(data_with_clusters, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "PAM Clustering Results") +
  theme_minimal()


pam_result <- pam(top_10_variable_genes, k)

# Create a data frame with cluster assignments
data_with_clusters <- data.frame(top_10_variable_genes, Cluster = pam_result$clustering)

# Create a scatter plot using two principal components (you can adjust this for your data)
pca <- prcomp(top_10_variable_genes)
data_with_clusters <- cbind(data_with_clusters, as.data.frame(pca$x[,1:2]))

# Create a scatter plot
ggplot(data_with_clusters, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "PAM Clustering Results (Top 10)") +
  theme_minimal()

pam_result <- pam(top_100_variable_genes, k)

# Create a data frame with cluster assignments
data_with_clusters <- data.frame(top_100_variable_genes, Cluster = pam_result$clustering)

# Create a scatter plot using two principal components (you can adjust this for your data)
pca <- prcomp(top_100_variable_genes)
data_with_clusters <- cbind(data_with_clusters, as.data.frame(pca$x[,1:2]))

# Create a scatter plot
ggplot(data_with_clusters, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "PAM Clustering Results (Top 100)") +
  theme_minimal()

pam_result <- pam(top_1000_variable_genes, k)

# Create a data frame with cluster assignments
data_with_clusters <- data.frame(top_1000_variable_genes, Cluster = pam_result$clustering)

# Create a scatter plot using two principal components (you can adjust this for your data)
pca <- prcomp(top_1000_variable_genes)
data_with_clusters <- cbind(data_with_clusters, as.data.frame(pca$x[,1:2]))

# Create a scatter plot
ggplot(data_with_clusters, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "PAM Clustering Results (Top 1000)") +
  theme_minimal()

pam_result <- pam(top_10000_variable_genes, k)

# Create a data frame with cluster assignments
data_with_clusters <- data.frame(top_10000_variable_genes, Cluster = pam_result$clustering)

# Create a scatter plot using two principal components (you can adjust this for your data)
pca <- prcomp(top_10000_variable_genes)
data_with_clusters <- cbind(data_with_clusters, as.data.frame(pca$x[,1:2]))

# Create a scatter plot
ggplot(data_with_clusters, aes(x = PC1, y = PC2, color = factor(Cluster))) +
  geom_point() +
  labs(title = "PAM Clustering Results (Top 10000)") +
  theme_minimal()


# Print the clustering results
#print(pam_result)

# To access cluster assignments, you can use:
#cluster_assignments <- pam_result$clustering

######################################################################################################
#
#Question 2eii
#K MEANS
install.packages("ggalluvial")
library(ggplot2)
library(ggalluvial)
# Assuming you have cluster assignments for all gene sets
cluster_assignments_5000 <- top_5000_variable_genes$cluster
cluster_assignments_10 <- top_10_variable_genes$cluster
cluster_assignments_100 <- top_100_variable_genes$cluster
cluster_assignments_1000 <- top_1000_variable_genes$cluster
cluster_assignments_10000 <- top_10000_variable_genes$cluster

# Create a data frame
alluvial_data <- data.frame(
  GeneSet = factor(c("Top 5000", "Top 10", "Top 100", "Top 1000", "Top 10000")),
  Cluster = factor(c(cluster_assignments_5000, cluster_assignments_10, cluster_assignments_100, cluster_assignments_1000, cluster_assignments_10000))
)
ggplot(alluvial_data, aes(axis1 = GeneSet, axis2 = Cluster)) +
  geom_alluvium(aes(fill = Cluster)) +
  geom_stratum() +
  theme_void() +
  labs(title = "Cluster Memberships for Different Gene Sets")

#H CLUST
# Install and load the required packages
install.packages("ggalluvial")
library(ggplot2)
library(ggalluvial)

# Assuming you have cluster assignments for all gene sets
cluster_assignments_5000 <- cutree(hclust_result_5000, k = 5)  # Adjust 'k' based on your clustering setup
cluster_assignments_10 <- cutree(hclust_result_10, k = 5)
cluster_assignments_100 <- cutree(hclust_result_100, k = 5)
cluster_assignments_1000 <- cutree(hclust_result_1000, k = 5)
cluster_assignments_10000 <- cutree(hclust_result_10000, k = 5)

# Create a data frame
alluvial_data <- data.frame(
  GeneSet = factor(c("Top 5000", "Top 10", "Top 100", "Top 1000", "Top 10000")),
  Cluster = factor(c(cluster_assignments_5000, cluster_assignments_10, cluster_assignments_100, cluster_assignments_1000, cluster_assignments_10000))
)

# Create the alluvial diagram
ggplot(alluvial_data, aes(axis1 = GeneSet, axis2 = Cluster)) +
  geom_alluvium(aes(fill = Cluster)) +
  geom_stratum() +
  theme_void() +
  labs(title = "Cluster Memberships for Different Gene Sets")


#CONSESUS
# Assuming you have the CCP cluster assignments for different gene sets
# Replace these with the actual cluster assignments for CCP
ccp_cluster_assignments_5000 <- ccp_clusterList
ccp_cluster_assignments_10 <- ccp_clusterList_10
ccp_cluster_assignments_100 <- ccp_clusterList_100
ccp_cluster_assignments_1000 <- ccp_clusterList_1000
ccp_cluster_assignments_10000 <- ccp_clusterList_10000

# Create a data frame for the alluvial diagram
alluvial_data <- data.frame(
  GeneSet = factor(c("Top 5000", "Top 10", "Top 100", "Top 1000", "Top 10000")),
  Cluster = factor(c(ccp_cluster_assignments_5000, ccp_cluster_assignments_10, ccp_cluster_assignments_100, ccp_cluster_assignments_1000, ccp_cluster_assignments_10000))
)

# Load ggplot2 and ggalluvial
library(ggplot2)
library(ggalluvial)

# Create the alluvial diagram
plot <- ggplot(alluvial_data, aes(axis1 = GeneSet, axis2 = Cluster)) +
  geom_alluvium(aes(fill = Cluster)) +
  geom_stratum() +
  labs(title = "Cluster Memberships for Different Gene Sets")

# Save the plot to a file
ggsave("ccp_alluvial_diagram.png", plot)

# PAM
# Load the required libraries
library(cluster)
library(ggplot2)
library(ggalluvial)

# Function to perform PAM clustering and get cluster assignments
perform_pam_clustering <- function(data, k) {
  pam_result <- pam(data, k)
  return(pam_result$clustering)
}

# Define the number of clusters (k)
k <- 5  # Desired number of clusters

# Perform PAM clustering and get cluster assignments for different gene sets
cluster_assignments_5000 <- perform_pam_clustering(top_5000_variable_genes, k)
cluster_assignments_10 <- perform_pam_clustering(top_10_variable_genes, k)
cluster_assignments_100 <- perform_pam_clustering(top_100_variable_genes, k)
cluster_assignments_1000 <- perform_pam_clustering(top_1000_variable_genes, k)
cluster_assignments_10000 <- perform_pam_clustering(top_10000_variable_genes, k)

# Create a data frame with cluster assignments
alluvial_data <- data.frame(
  GeneSet = factor(c("Top 5000", "Top 10", "Top 100", "Top 1000", "Top 10000")),
  Cluster = factor(c(cluster_assignments_5000, cluster_assignments_10, cluster_assignments_100, cluster_assignments_1000, cluster_assignments_10000))
)

# Create the alluvial diagram
plot <- ggplot(alluvial_data, aes(axis1 = GeneSet, axis2 = Cluster)) +
  geom_alluvium(aes(fill = Cluster)) +
  geom_stratum() +
  labs(title = "Cluster Memberships for Different Gene Sets") +
  theme_void()

# Save the alluvial diagram to an image (e.g., PNG)
ggsave("alluvial_diagram.png", plot, width = 10, height = 6, units = "in")

######################################################################################################
#Question 3 - Heatmaps and Dendrograms
  # Create heatmap
column_ha <- HeatmapAnnotation(sample = metadata$mutation_status, CCP = ccp_clusterList, hclust = hclust_clusterList, k_means = k_clusterList, PAM = pam_clusterList)
Heatmap(data_5000, top_annotation = column_ha, column_names_gp = grid::gpar(fontsize = 1), row_names_gp = grid::gpar(fontsize = 1))


######################################################################################################
#Question 4a - Statistics
  # Initialize table
chisqTable <- data.frame(matrix(nrow = 4, ncol = 2))
colnames(chisqTable) <- c("Unadjusted", "Adjusted")
rownames(chisqTable) <- c("CCP", "hclust", "k-means", "PAM")
  # Run unadjusted tests
chisqTable[1,1] <- chisq.test(metadata$mutation_status, ccp_clusterList)$p.value
chisqTable[2,1] <- chisq.test(metadata$mutation_status, hclust_clusterList)$p.value
chisqTable[3,1] <- chisq.test(metadata$mutation_status, k_clusterList)$p.value
chisqTable[4,1] <- chisq.test(metadata$mutation_status, pam_clusterList)$p.value
  # Calculate adjusted p values
chisqTable[,2] <- p.adjust(chisqTable[,1])
